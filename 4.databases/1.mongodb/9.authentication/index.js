const express = require('express');
const app = express();
const User = require('./models/user');
const mongoose = require('mongoose');
const session = require('express-session');

mongoose.connect('mongodb://localhost:27017/loginDemo')
    .then(() => {
        console.log("MONGO CONNECTION OPEN!!!")
    })
    .catch(err => {
        console.log("OH NO MONGO CONNECTION ERROR!!!!")
        console.log(err)
    })


app.set('view engine', 'ejs');
app.set('views', 'views');

app.use(express.urlencoded({ extended: true }));
app.use(session({ secret: 'notagoodsecret' }))

// To view the contents that are specific to the user, we have to check whether user has logged-in.
// So whenever we want a user autherntication to view a particular content, we can add this requireLogin to the route 
const requireLogin = (req, res, next) => {
    if (!req.session.user_id) {
        // We will check if there is a session with user_id
        return res.redirect('/login')
    }
    next();
}
app.get('/', (req, res) => {
    res.send('THIS IS THE HOME PAGE')
})

// User Registration
app.get('/register', (req, res) => {
    res.render('register')
})

app.post('/register', async (req, res) => {
    const { password, username } = req.body;
    const user = new User({ username, password })
    // We are creating a new user and then saving it.
    // We have defined a pre middleware for save() in usermodel. That will take care of the hashing. Why? Now everytime a user is saved (created/updated), we will hash it and store it in db. 
    await user.save();
    req.session.user_id = user._id;
    // user._id and foundUser._id (below) refer to the unique identifier (_id) automatically generated by MongoDB/Mongoose. Hope you remeber that it is a convention used by MongoDB and Mongoose where id is prefixed with underscore.
    // Now we are storing the user's generated id to the session.
    res.redirect('/')
})

app.get('/login', (req, res) => {
    res.render('login')
})
app.post('/login', async (req, res) => {
    const { username, password } = req.body;
    const foundUser = await User.findAndValidate(username, password);
    if (foundUser) {
        req.session.user_id = foundUser._id;
        // you are defining the user_id under req.session and assigning it the value of foundUser._id 
        res.redirect('/secret');
    }
    else {
        res.redirect('/login')
    }
})

app.post('/logout', (req, res) => {
    req.session.user_id = null; 
        // It effectively "logs out" the user by clearing their user_id but keeps the session and all other session data intact. This means other session variables are preserved and the session is still active.
        // Example: If you have items added into a cart, those details are preserved evem after you have logged out. 
    // req.session.destroy(); 
        // This method completely destroys the session. It removes all session data and terminates the session itself. After calling this method, a new session will be created for the user on their next request.
    res.redirect('/login');
})

app.get('/secret', requireLogin, (req, res) => {
    res.render('secret')
})
app.get('/topsecret', requireLogin, (req, res) => {
    res.send("TOP SECRET!!!")
})

app.listen(3000, () => {
    console.log("SERVING YOUR APP!")
})

